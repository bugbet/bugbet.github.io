{"version":3,"sources":["metamask.js","AsyncFetch.js","App.js","serviceWorker.js","index.js"],"names":["createMetaMaskContext","AsyncFetch","state","status","result","mounted","fetch","args","_this","setState","props","then","catch","e","message","clear","this","autoFetch","prevProps","render","Object","objectSpread","React","Component","defaultProps","theme","createMuiTheme","palette","type","primary","main","secondary","error","augur","Augur","connectOptions","constants","augurNode","ethereumNode","http","pollingIntervalMilliseconds","blockRetention","connectionTimeout","styles","@global","body","appBar","position","toolbarTitle","flex","layout","defineProperty","width","marginLeft","spacing","marginRight","breakpoints","up","heroContent","maxWidth","margin","padding","concat","cardHeader","cardPricing","display","justifyContent","alignItems","marginBottom","cardActions","paddingBottom","footer","marginTop","borderTop","divider","AugurApi","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","connected","connect","rpc","setDebugOptions","broadcast","tx","pify","_ref","console","log","getMarkets","params","markets","universe","contracts","Universe","marketIds","getMarketsInfo","Promise","resolve","getBetterWorseOrders","trading","getOrders","placeTrade","getCategories","Outcome","_ref6","style","price","react_default","a","createElement","border","fontSize","height","backgroundColor","MarketsContainer","styled","div","_templateObject","SimpleTable","_ref7","titles","rows","Table","TableHead","TableRow","map","title","TableCell","key","TableBody","row","join","cell","i","MarketDetails","_ref8","text","details","dangerouslySetInnerHTML","__html","linkifyUrls","replace","getMaxOutcome","outcomes","outcome","sort","length","Market","withStyles","_ref9","category","classes","id","description","openInterest","settlementFee","volume","marketType","endTime","reportingState","tags","_React$useState","useState","_React$useState2","slicedToArray","open","setOpen","_React$useState3","getModalStyle","modalStyle","handleOpen","classes2","useModalStyles","Card","CardHeader","subheader","titleTypographyProps","variant","subheaderTypographyProps","align","action","StarBorder_default","cursor","className","CardContent","App_Outcome","Typography","App_MarketDetails","App_SimpleTable","distanceInWordsStrict","Date","addSuffix","unit","CardActions","textAlign","Chip","icon","Close_default","label","Fragment","Button","color","onClick","Modal","aria-labelledby","aria-describedby","onClose","paper","App_MarketBet","marketId","sortByKey","b","getBestSell","sells","reverse","getBestBuy","buys","smallify","num","parseInt","top","left","transform","makeStyles","background","boxShadow","shadows","outline","MarketBetView","_ref11","orders","_useState","_useState2","bet","setBet","_orders$Object$keys$","keys","buy","sell","bestBuy","values","bestSell","oddsTrue","oddsFalse","payoutTrue","payoutFalse","toPrecision","Grid","container","direction","flexGrow","justify","TextField","InputProps","endAdornment","InputAdornment","min","value","onChange","target","item","xs","MarketBet","_ref12","src_AsyncFetch","_ref13","LinearProgress","Markets","_ref14","market","assign","Layout","_ref15","children","ThemeProvider","CssBaseline","Hero","_ref16","component","gutterBottom","App_Layout","App_Hero","App_AugurApi","creator","_ref17","App_Markets","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56e3b9fc.chunk.js","sourcesContent":["// metamask.js\nimport { createMetaMaskContext } from \"@tokenfoundry/react-metamask\";\n\nconst MetaMaskContext = createMetaMaskContext();\nexport default MetaMaskContext;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass AsyncFetch extends React.Component {\n  state = {\n    status: \"idle\",\n    result: null\n  };\n\n  mounted = false;\n\n  componentDidMount() {\n    this.mounted = true;\n    if (this.props.autoFetch) {\n      this.fetch();\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.fetch !== prevProps.fetch) {\n      this.fetch();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetch = args => {\n    this.setState(\n      {\n        status: \"loading\"\n      },\n      () => {\n        this.props\n          .fetch(args)\n          .then(result => {\n            this.mounted &&\n              this.setState({\n                status: \"success\",\n                result\n              });\n          })\n          .catch(e => {\n            this.mounted &&\n              this.setState({\n                status: \"error\",\n                result: e.message\n              });\n          });\n      }\n    );\n  };\n\n  clear = () => {\n    this.setState({\n      result: null\n    });\n  };\n\n  render() {\n    return this.props.render({\n      ...this.state,\n      fetch: this.fetch,\n      clear: this.clear\n    });\n  }\n}\n\nAsyncFetch.propTypes = {\n  autoFetch: PropTypes.bool,\n  // the fetch call function\n  fetch: PropTypes.func.isRequired,\n  render: PropTypes.func.isRequired\n};\n\nAsyncFetch.defaultProps = {\n  autoFetch: false\n};\n\nexport default AsyncFetch;\n","import React, { useContext, useState } from \"react\";\nimport \"./App.css\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Paper from \"@material-ui/core/Paper\";\nimport StarIcon from \"@material-ui/icons/StarBorder\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { distanceInWordsStrict } from \"date-fns\";\nimport styled from \"styled-components\";\nimport Augur from \"augur.js\";\nimport debounce from \"lodash.debounce\";\nimport pify from \"pify\";\n\nimport linkifyUrls from \"linkify-urls\";\n\nimport MetaMaskContext from \"./metamask\";\n\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport AsyncFetch from \"./AsyncFetch\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#ff731e\"\n    },\n    secondary: {\n      main: \"#1fff9e\"\n    },\n    error: {\n      main: \"#ff2a1f\"\n    }\n  }\n});\n\nexport const augur = new Augur();\nexport const { constants } = augur;\n\nconst creator = \"0xB841457Ef1EB2c4237eD840e304D8E6091EB1912\";\n\nconst connectOptions = {\n  augurNode: \"wss://augur-node.augur.casino\",\n  //wss://dev.augur.net/augur-node\", //wss://augur-node.augur.casino\",\n  ethereumNode: {\n    //http: \"https://rinkeby.infura.io/72b98520d10248d49ac6177895cc8b8b\",\n    http:\n      \"https://eth-mainnet.alchemyapi.io/jsonrpc/7sE1TzCIRIQA3NJPD5wg7YRiVjhxuWAE\",\n    //ws: \"\",\n\n    //http: \"https://test.augur.net/ethereum-http\",\n    //ws: \"wss://test.augur.net/ethereum-ws\",\n\n    pollingIntervalMilliseconds: 10000,\n    blockRetention: 100,\n    connectionTimeout: 60000\n  }\n\n  /*{\n    http: \"https://rinkeby.infura.io/72b98520d10248d49ac6177895cc8b8b\"\n    //ws: \"wss://rinkeby.augur.net/ethereum-ws\",\n    //pollingIntervalMilliseconds: 10000,\n    //blockRetention: 100,\n    //connectionTimeout: 60000\n  }*/\n\n  //useWeb3Transport: true\n};\n\nconst styles = theme => ({\n  \"@global\": {\n    body: {\n      //   backgroundColor: theme.palette.common.white\n    }\n  },\n  appBar: {\n    position: \"relative\"\n  },\n  toolbarTitle: {\n    flex: 1\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    [theme.breakpoints.up(900 + theme.spacing(6))]: {\n      width: 900,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  heroContent: {\n    maxWidth: 600,\n    margin: \"0 auto\",\n    padding: `${theme.spacing(8)}px 0 ${theme.spacing(6)}px`\n  },\n  cardHeader: {\n    //  backgroundColor: theme.palette.grey[200]\n  },\n  cardPricing: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"baseline\",\n    marginBottom: theme.spacing(2)\n  },\n  cardActions: {\n    [theme.breakpoints.up(\"sm\")]: {\n      paddingBottom: theme.spacing(2)\n    }\n  },\n  footer: {\n    marginTop: theme.spacing(8),\n    borderTop: `1px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing(6)}px 0`\n  }\n});\n\n// wrapper for <AugurApi/> component\nclass AugurApi extends React.Component {\n  state = {\n    connected: false\n  };\n  constructor(connectOptions) {\n    super();\n    this.connectOptions = connectOptions;\n    this.augurNode = null;\n    this.ethereumNode = null;\n    this.connect();\n  }\n  connect = () => {\n    augur.rpc.setDebugOptions({ broadcast: true, connect: true, tx: true });\n    return pify(augur.connect)(connectOptions)\n      .then(({ augurNode, ethereumNode }) => {\n        //console.log(\"connected\", {augurNode, ethereumNode});\n        this.augurNode = augurNode;\n        this.ethereumNode = ethereumNode;\n        this.setState({\n          connected: true\n        });\n      })\n      .catch(console.log);\n  };\n  getMarkets = params =>\n    (this.ethereumNode &&\n      pify(augur.markets.getMarkets)({\n        universe: this.ethereumNode.contracts.Universe,\n        ...params\n      }).then(\n        marketIds =>\n          console.log(\"marketIds\", marketIds) ||\n          // get related infos\n          pify(augur.markets.getMarketsInfo)({\n            marketIds\n          })\n      )) ||\n    Promise.resolve([]);\n\n  //trading.getBetterWorseOrders\n\n  getBetterWorseOrders = params =>\n    (this.ethereumNode && pify(augur.trading.getBetterWorseOrders)(params)) ||\n    Promise.resolve([]);\n\n  getOrders = params =>\n    (this.ethereumNode && pify(augur.trading.getOrders)(params)) ||\n    Promise.resolve([]);\n\n  placeTrade = params =>\n    (this.ethereumNode && pify(augur.trading.placeTrade)(params)) ||\n    Promise.resolve([]);\n\n  getCategories = () =>\n    (this.ethereumNode &&\n      pify(augur.markets.getCategories)({\n        universe: this.ethereumNode.contracts.Universe\n      })) ||\n    Promise.resolve([]);\n\n  render() {\n    return this.props.render({\n      connected: this.state.connected,\n      getMarkets: this.getMarkets,\n      getOrders: this.getOrders,\n      placeTrade: this.placeTrade,\n      getBetterWorseOrders: this.getBetterWorseOrders,\n      getCategories: this.getCategories,\n      augurNode: this.augurNode,\n      ethereumNode: this.ethereumNode\n    });\n  }\n}\n\n// load and display markets list\nconst MarketsList = ({ getMarkets }) => (\n  <AsyncFetch\n    fetch={getMarkets}\n    autoFetch={true}\n    render={({ status, result }) => {\n      if (status === \"success\") {\n        return <Markets markets={result} />;\n      } else if (status === \"loading\") {\n        return <LinearProgress style={{ marginTop: 50 }} />;\n      }\n      return null;\n    }}\n  />\n);\n\n// load and display top categories\nconst TopCategories = ({ getCategories, onCategoryClick }) => (\n  <AsyncFetch\n    fetch={getCategories}\n    autoFetch={true}\n    render={({ status, result }) => {\n      if (status === \"success\" && result) {\n        const topCategories = result.sort(sortCategories);\n        topCategories.reverse();\n        return (\n          <Grid container spacing={1} style={{ paddingTop: 20 }}>\n            {topCategories.slice(0, 16).map(category => (\n              <Grid item key={category.categoryName}>\n                <Button\n                  size=\"small\"\n                  onClick={() => onCategoryClick(category)}\n                  variant=\"outlined\"\n                >\n                  {category.categoryName}\n                </Button>\n              </Grid>\n            ))}\n          </Grid>\n        );\n      }\n      return null;\n    }}\n  />\n);\n\nconst OUTCOME_HEIGHT = 15;\n\nconst Outcome = ({ style, price }) => (\n  <div\n    style={{\n      border: \"1px solid silver\",\n      display: \"inline-block\",\n      fontSize: 0,\n      height: OUTCOME_HEIGHT,\n      width: \"100%\",\n      ...style\n    }}\n  >\n    <div\n      style={{\n        display: \"inline-block\",\n        height: \"100%\",\n        width: price * 100.0 + \"%\",\n        backgroundColor: \"#51c279\"\n      }}\n    />\n    <div\n      style={{\n        display: \"inline-block\",\n        height: \"100%\",\n        width: (1 - price) * 100.0 + \"%\",\n        backgroundColor: \"#c6655d\"\n      }}\n    />\n  </div>\n);\n\nconst sortCategories = (a, b) => {\n  if (parseFloat(a.openInterest) < parseFloat(b.openInterest)) {\n    return -1;\n  } else if (parseFloat(a.openInterest) > parseFloat(b.openInterest)) {\n    return 1;\n  }\n  return 0;\n};\n\n//const TopCategories = ({}) => ()\n\nconst MarketsContainer = styled.div`\n  display: \"flex\";\n  margin: 20px auto;\n  max-width: 80vw;\n`;\n\nconst SimpleTable = ({ titles, rows }) => {\n  return (\n    <Table style={{ width: \"100%\" }}>\n      <TableHead>\n        <TableRow>\n          {titles.map(title => (\n            <TableCell key={title}>{title}</TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <TableRow key={row.join(\"-\")}>\n            {row.map((cell, i) => (\n              <TableCell key={i + \"\" + cell}>{cell}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst text2html = text =>\n  (text && linkifyUrls(text.replace(/\\n/gm, \"<br/>\"))) || \"\";\n\nconst MarketDetails = ({ details }) => (\n  <div\n    style={{ margin: 20, fontSize: \"0.85em\" }}\n    dangerouslySetInnerHTML={{ __html: text2html(details) }}\n  />\n);\n\nconst getMaxOutcome = outcomes =>\n  outcomes.map(outcome => outcome.price).sort()[outcomes.length - 1];\n\nconst Market = withStyles(styles)(\n  ({\n    category,\n    classes,\n    augur,\n    id,\n    description,\n    openInterest,\n    settlementFee,\n    volume,\n    marketType,\n    outcomes,\n    endTime,\n    details,\n    tags,\n    reportingState\n  }) => {\n    const onBetClick = () => {\n      console.log(\"ioooo\");\n      handleOpen();\n    };\n\n    const [open, setOpen] = React.useState(false);\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n\n    const handleOpen = () => {\n      setOpen(true);\n    };\n\n    const handleClose = () => {\n      setOpen(false);\n    };\n    const classes2 = useModalStyles();\n\n    return (\n      <Card style={{ margin: 10 }}>\n        <CardHeader\n          title={description}\n          subheader={category}\n          titleTypographyProps={{ variant: \"h6\" }}\n          subheaderTypographyProps={{ align: \"left\" }}\n          action={true ? <StarIcon style={{ cursor: \"pointer\" }} /> : null}\n          className={classes.cardHeader}\n        />\n        <CardContent>\n          {marketType === \"yesNo\" && (\n            <Outcome price={getMaxOutcome(outcomes)} />\n          )}\n          <Typography variant=\"subtitle1\" align=\"left\" key={id}>\n            <MarketDetails details={details} />\n            <SimpleTable\n              titles={[\n                \"volume\",\n                \"eth open interest\",\n                \"eth est. fee\",\n                \"expires\"\n              ]}\n              rows={[\n                [\n                  volume,\n                  openInterest,\n                  settlementFee * 100 + \"%\",\n                  distanceInWordsStrict(new Date(), new Date(endTime * 1000), {\n                    addSuffix: true,\n                    unit: \"d\"\n                  })\n                ]\n              ]}\n            />\n          </Typography>\n        </CardContent>\n        <CardActions className={classes.cardActions}>\n          <div style={{ textAlign: \"center\", width: \"100%\" }}>\n            {(reportingState === \"FINALIZED\" && (\n              <Chip icon={<CloseIcon />} label=\"FINALIZED\" />\n            )) || (\n              <React.Fragment>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={onBetClick}\n                >\n                  PLACE BET\n                </Button>\n                <Modal\n                  aria-labelledby=\"simple-modal-title\"\n                  aria-describedby=\"simple-modal-description\"\n                  open={open}\n                  onClose={handleClose}\n                >\n                  <div style={modalStyle} className={classes2.paper}>\n                    <MarketBet\n                      marketId=\"0x1d96d2e931ccdfa08672c2fe12e2b5df34861f46\"\n                      augur={augur}\n                    />\n                  </div>\n                </Modal>\n              </React.Fragment>\n            )}\n          </div>\n        </CardActions>\n      </Card>\n    );\n  }\n);\n\nconst sortByKey = key => (a, b) => {\n  if (a[key] < b[key]) {\n    return 1;\n  } else if (a[key] > b[key]) {\n    return -1;\n  }\n  return 0;\n};\n\nconst getBestSell = sells => {\n  return sells.sort(sortByKey(\"price\")).reverse()[0];\n};\n\nconst getBestBuy = buys => {\n  return buys.sort(sortByKey(\"price\"))[0];\n};\n\nconst OrderBook = ({ data }) => {\n  console.log(\"xxx\", data);\n  const { buy, sell } = data[Object.keys(data)[0]][\"1\"];\n  const bestBuy = getBestBuy(Object.values(buy));\n  const bestSell = getBestSell(Object.values(sell));\n  console.log(\"bestBuy\", bestBuy);\n  console.log(\"bestSell\", bestSell);\n  return <div>BLALBA</div>;\n};\n\nconst smallify = num => parseInt(num * 10000, 10) / 10000;\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  // + rand();\n  const left = 50;\n  // + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useModalStyles = makeStyles(theme => ({\n  paper: {\n    position: \"absolute\",\n    width: 500,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(4),\n    outline: \"none\"\n  }\n}));\n\nconst round = num => parseInt(num * 100, 10) / 100;\n\nconst MarketBetView = withStyles(styles)(\n  ({ classes, augur, orders, marketId }) => {\n    const [bet, setBet] = useState(0);\n\n    const { buy, sell } = orders[Object.keys(orders)[0]][\"1\"];\n    const bestBuy = getBestBuy(Object.values(buy));\n    const bestSell = getBestSell(Object.values(sell));\n\n    const oddsTrue = bestSell.price * 100;\n    const oddsFalse = 100 - bestBuy.price * 100;\n    const payoutTrue = bet / bestSell.price;\n    const payoutFalse = (bet / (1 - bestBuy.price)).toPrecision(4);\n\n    // console.log({ web3, accounts, openMetaMask, error });\n\n    // if (openMetaMask) {\n    //   //openMetaMask();\n    // }\n\n    const onYesClick = () => {\n      // const { web3, accounts, error, awaiting, openMetaMask } = useContext(\n      //   MetaMaskContext\n      // );\n      /*\n      augur.placeTrade({\n        amount: payoutTrue,\n        //sharesProvided: \"0\",\n        limitPrice: \"2\",\n        minPrice: \"1\",\n        maxPrice: \"3\",\n        numTicks: \"10000\",\n        _direction: 0,\n        _market: marketId,\n        _outcome: 0,\n        doNotCreateOrders: false,\n\n        onSent: function(result) {\n          console.log(\"onSent\", result);\n        },\n        onSuccess: function(result) {\n          console.log(\"onSuccess\", result);\n        },\n        onFailed: function(result) {\n          console.log(\"onFailed\", result);\n        }\n      });\n      */\n      // openMetaMask();\n    };\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        style={{ flexGrow: 1 }}\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Typography variant=\"h4\" id=\"modal-title\" style={{ marginBottom: 20 }}>\n          Place Bet\n        </Typography>\n\n        <TextField\n          type=\"number\"\n          variant=\"outlined\"\n          label=\"Bet amount\"\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">Eth</InputAdornment>,\n            style: { fontSize: \"2em\", textAlign: \"center\" }\n          }}\n          min=\"0\"\n          value={bet}\n          onChange={e => setBet(e.target.value)}\n        />\n        <Grid\n          container\n          item\n          direction=\"row\"\n          style={{\n            flexGrow: 0,\n            fontSize: \"1.5em\",\n            margin: \"40px 0px\"\n            //marginTop: 40,\n            //marginBottom: 20\n          }}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={6} container direction=\"column\" justify=\"center\">\n            <Grid item>Odds : {smallify(oddsTrue)} %</Grid>\n            <Grid item>Payout : {smallify(payoutTrue)}</Grid>\n            <Grid item style={{ marginTop: 40, textAlign: \"center\" }}>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={onYesClick}\n              >\n                YES\n              </Button>\n            </Grid>\n          </Grid>\n          <Grid item xs={6} container direction=\"column\">\n            <Grid item>Odds : {smallify(oddsFalse)} %</Grid>\n            <Grid item>Payout : {smallify(payoutFalse)}</Grid>\n            <Grid item style={{ marginTop: 40, textAlign: \"center\" }}>\n              <Button variant=\"contained\" color=\"primary\">\n                NO\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n);\n\nconst MarketBet = ({ augur, marketId }) => (\n  <AsyncFetch\n    fetch={() =>\n      augur.getOrders({\n        marketId\n        // outcome: 0,\n        //orderType: \"buy\",\n        //price: \"0.19\"\n      })\n    }\n    autoFetch={true}\n    render={({ status, result }) => {\n      console.log(\"result\", result);\n\n      if (status === \"success\") {\n        return (\n          <React.Fragment>\n            <MarketBetView augur={augur} orders={result} marketId={marketId} />\n          </React.Fragment>\n        );\n      } else if (status === \"loading\") {\n        return <LinearProgress style={{ marginTop: 50 }} />;\n      }\n      return null;\n    }}\n  />\n);\n\nconst Markets = ({ markets, augur }) => (\n  <MarketsContainer>\n    {markets.map(market => (\n      <Market key={market.description} {...market} augur={augur} />\n    ))}\n  </MarketsContainer>\n);\n\nconst Layout = ({ classes, children }) => (\n  <React.Fragment>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <main className={classes.layout}>{children}</main>\n    </ThemeProvider>\n  </React.Fragment>\n);\n\nconst Hero = ({ classes }) => (\n  <div className={classes.heroContent}>\n    <Typography\n      component=\"h1\"\n      variant=\"h2\"\n      align=\"center\"\n      color=\"textPrimary\"\n      gutterBottom\n    >\n      BugBet\n    </Typography>\n  </div>\n);\n\nconst Index = props => {\n  const { classes } = props;\n  return (\n    <Layout classes={classes}>\n      <Hero classes={classes} />\n      <AugurApi\n        render={augur => {\n          if (augur.connected) {\n            return (\n              <>\n                <AsyncFetch\n                  fetch={() => augur.getMarkets({ creator })}\n                  autoFetch={true}\n                  render={({ status, result }) => {\n                    if (status === \"success\") {\n                      return <Markets markets={result} augur={augur} />;\n                    } else if (status === \"loading\") {\n                      return <LinearProgress style={{ marginTop: 50 }} />;\n                    }\n                    return null;\n                  }}\n                />\n              </>\n            );\n          }\n          return <LinearProgress style={{ marginTop: 50 }} />;\n        }}\n      />\n    </Layout>\n  );\n};\n\nIndex.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(Index);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}